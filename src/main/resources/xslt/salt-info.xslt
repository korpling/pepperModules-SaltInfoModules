<?xml version="1.0" encoding="UTF-8"?>
<!-- TODO: accumulation for maincorpora with more than 1 subcorpus & merging Values in accumulated total-rows -->
<!-- repair toggleRow for subcorpora-totalTable -->
<!-- optimize sorting -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
    <xsl:import
        href="variables.xslt"/>
    <xsl:import href="style.xslt"/>
    <xsl:output encoding="UTF-8" method="html" indent="yes"/>
    <xsl:key name="structEntryKey" match="//sDocumentInfo/structuralInfo//entry" use="@key"/>
    <xsl:key name="totalAnnoName" match="//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo"
        use="@sName"/>
    <xsl:key name="totalValue" match="//sValue" use="."/>


    <!-- FLAG -->
    <!-- delete content to run without accumulation -->
    <xsl:variable name="accumulation">t</xsl:variable>


    <!-- font-informations -->
    <xsl:variable name="TextFont">
        <style type="text/css">
            TD{
                font-family:Arial;
                font-size:10pt;
            }</style>
    </xsl:variable>

    <!-- i-img -->
    <xsl:variable name="InfoImg">
        <img src="{$InfoImgSrc}" alt="" align="{$InfoImgAlign}" style="{$InfoImgStyle}"/>
    </xsl:variable>


    <!-- creates the html-structure -->
    <xsl:template match="/" name="HtmlStructure">
        <html>
            <head>
                <xsl:call-template name="Title"/>
                <xsl:call-template name="MetaInfo"/>
                <xsl:call-template name="JavaScriptElem"/>
            </head>
            <body onload="initTooltips()">
                <table width="{$htmlWidth}" cellspacing="{$cellspacing}"
                    cellpadding="{$htmlCellpadding}" border="{$htmlBorder}" style="{$htmlStyle}">
                    <xsl:call-template name="HeadOfHtml"/>
                    <tr>
                        <xsl:call-template name="TreeTable"/>
                    </tr>
                    <tr>
                        <xsl:call-template name="Footer"/>
                    </tr>
                </table>
            </body>
        </html>
    </xsl:template>


    <!-- creates a title-tag in the html-head -->
    <xsl:template name="Title">
        <title><xsl:apply-templates select="/saltProjectInfo"/>-Overview</title>
    </xsl:template>

    <!-- matches on the sCorpusInfo-element (main-corpus) and prints its name -->
    <xsl:template name="RootCorpus" match="saltProjectInfo">
        <xsl:value-of select="@sName"/>
    </xsl:template>

    <!-- creates the header of the html -->
    <xsl:template name="HeadOfHtml">
        <tr>
            <td colspan="{$headerColspan}" style="{$headerstyle}" valign="{$headerValign}"><a
                    href="http://korpling.german.hu-berlin.de/saltnpepper"><img src="{$logoSrc}"
                        alt="{$logoAlternative}" style="{$logoStyle}"/></a><xsl:call-template
                    name="RootCorpus"/><xsl:apply-templates select="saltProjectInfo"/> -
                Overview</td>
        </tr>
        <tr>
            <td height="{$header2height}" colspan="{$headerColspan}" style="{$header2style}">
                generated with SaltNPepper</td>
        </tr>
    </xsl:template>

    <!-- creates the clickable tree-table -->
    <xsl:template name="TreeTable">
        <td style="{$htmlTreeTdStyle}" width="{$htmlTreeTdWidth}">
            <br/>
            <table width="{$treetablewidth}" border="{$treetableborder}"
                style="{$treetableBorderStyle}" cellpadding="{$treetableCellpadding}">
                <tr>
                    <td style="{$treetableStyle}">
                        <script type="text/javascript">
						
                                                {createTree(Tree);}
						</script>
                    </td>
                </tr>
            </table>
        </td>
        <td style="{$htmlContentPartStyle}">
            <br/>
            <div style="{$ContentTableStyle}" align="{$ContentTableAlign}">
                <xsl:apply-templates select="/saltProjectInfo/sCorpusInfo" mode="MainCorpusTable"/>
                <xsl:apply-templates select="//sCorpusInfo/sCorpusInfo" mode="SubCorpusTable"> </xsl:apply-templates>
                <xsl:apply-templates select="//sDocumentInfo" mode="DocumentTable"
                > </xsl:apply-templates>
            </div>
        </td>
    </xsl:template>

    <!-- creates the html-footer -->
    <xsl:template name="Footer">
        <td colspan="{$footerColspan}" style="{$footerStyle}">
            <hr/>
            <div style="{$footerTextStyle}">the here presented Information of the corpus where
                generated by the SaltInfoModule module, part of the saltNpepper project, please see
                    <a href="http://korpling.german.hu-berlin.de/saltnpepper"
                    >http://korpling.german.hu-berlin.de/saltnpepper</a>
                <br/> generated on <xsl:call-template name="RootElement"/>
                <div align="{$impressumAlign}"><a
                        href="http://korpling.german.hu-berlin.de/saltnpepper/salt/info/info-10/impressum.html"
                        >Impressum</a></div>
            </div>
        </td>
    </xsl:template>

    <!-- matches on the root-Element and prints the "generatedOn"-date and time -->
    <xsl:template name="RootElement">
        <xsl:value-of select="saltProjectInfo/@generatedOn"/>
    </xsl:template>

    <!-- contains link to stylesheet -->
    <xsl:template name="MetaInfo">
        <link rel="StyleSheet" href="{$treecss}" type="text/css"/>
        <link rel="StyleSheet" href="{$saltinfocss}" type="text/css"/>
    </xsl:template>

    <!-- contains javascript-information and computes array-elements -->
    <xsl:template name="JavaScriptElem">
        <!-- <script type="text/javascript" src="{$secJsSrc}"/> -->
       <!--  <script type="text/javascript" src="{$jQuerySrc}"/> -->
        <script type="text/javascript" src="{$treejs}"/>

        <script type="text/javascript">
                       { 
                       var Tree = new Array;
                        // nodeId | parentNodeId | nodeName | formId
                        
                        <!-- ids for maincorpora -->
            <xsl:for-each select="//saltProjectInfo/sCorpusInfo">
                Tree[<xsl:value-of select="position()-1"/>] = "<xsl:value-of select="translate(@id,'/,-,.','')"/>|<xsl:value-of select="0"/>|<xsl:value-of select="@sName"/>|<xsl:value-of select="@id"/>";
                    </xsl:for-each>
                        <!--
                id's for subcorpora//-->
                           <xsl:for-each select="//sCorpusInfo/sCorpusInfo">    
                               Tree[<xsl:value-of select="position() + count(parent::node()) -1"/>] = "<xsl:value-of select="translate(@id,'/,-,.','')"/>|<xsl:value-of select="translate(parent::node()/@id,'/,-,.','')"/>|<xsl:value-of select="@sName"/>|<xsl:value-of select="@id"/>";
                     </xsl:for-each>
                        <!--
                id's for documents with subcorpora//-->
            <xsl:for-each select="//sCorpusInfo/sCorpusInfo/sDocumentInfo">
                         Tree[<xsl:value-of select="position() + count(parent::node()[sCorpusInfo]) + count(../parent::node()[sCorpusInfo])"/>] = "<xsl:value-of select="translate(@id,'/,-,.','')"/>|<xsl:value-of select="translate(parent::node()/@id,'/,-,.','')"/>|<xsl:value-of select="@sName"/>|<xsl:value-of select="@id"/>";
                     </xsl:for-each>
                        <!--
                id's for documents without subcorpora//-->
            <xsl:for-each select="//saltProjectInfo/sCorpusInfo/sDocumentInfo">
                Tree[<xsl:value-of select="position() + count(parent::node()[sCorpusInfo])"/>] = "<xsl:value-of select="translate(@id,'/,-,.','')"/>|<xsl:value-of select="translate(parent::node()/@id,'/,-,.','')"/>|<xsl:value-of select="@sName"/>|<xsl:value-of select="@id"/>";
            </xsl:for-each>}
                </script>
        <xsl:copy-of select="$TextFont"/>
    </xsl:template>

    <!-- creates tables for each document -->
    <xsl:template mode="DocumentTable" match="//sDocumentInfo">
        <xsl:param name="NO_LAYER" select="./sLayerInfo[@sName=NO_LAYER]/@sName"/>
        <div style="display:none;">
            <xsl:attribute name="id">
                <xsl:value-of select="@id"/>
            </xsl:attribute>
            <xsl:apply-templates mode="MetaData" select="metaDataInfo">
                <xsl:with-param name="metaDataInfo"
                    select="$MappingList2/elem[@maptype='metaDataInfo']"/>
            </xsl:apply-templates>

            <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
                <tr>
                    <td colspan="{$tdcolspan}" style="{$tdstyle}">
                        <a class="tooltip">
                            <xsl:value-of select="$MappingList2/elem[@maptype='structuralInfo']"/>
                            <xsl:copy-of select="$InfoImg"/>
                            <xsl:call-template name="structTooltip"/>
                        </a>
                    </td>
                </tr>
                <xsl:call-template name="sName"/>
                <xsl:apply-templates select="structuralInfo/entry[@key = 'SNode']" mode="SNodeEntry"/>
                <xsl:apply-templates select="structuralInfo/entry[@key = 'SRelation']"
                    mode="SRelationEntry"/>
                <xsl:apply-templates mode="Entry" select="structuralInfo/entry">
                    <xsl:sort select="@key"/>
                </xsl:apply-templates>
            </table>
            <br/>
            <xsl:apply-templates mode="totalAnno" select="totalSAnnotationInfo">
                <xsl:with-param name="totalSAnno"
                    select="$MappingList2/elem[@maptype='totalSAnnotationInfo']"/>
            </xsl:apply-templates>
            <xsl:for-each select="sLayerInfo">
                <xsl:sort select="@sName" order="ascending"/>
                <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
                    <xsl:call-template name="ChildNodeControl">
                        <xsl:with-param name="NO_LAYER"
                            select="$MappingList2/elem[@maptype='NO_LAYER']"/>
                    </xsl:call-template>
                    <xsl:choose>
                        <xsl:when test="child::node()=structuralInfo">
                            <tr>
                                <td colspan="{$tdColspanStructRows}" style="{$tdRowExtinctionStyle}"
                                    align="{$tdAlignExtinction}">
                                    <a class="tooltip">
                                        <b>
                                            <xsl:value-of
                                                select="$MappingList2/elem[@maptype='structuralInfo']"
                                            />
                                        </b>
                                        <xsl:copy-of select="$InfoImg"/>
                                        <xsl:call-template name="structTooltip"/>
                                    </a>
                                </td>
                                <xsl:call-template name="ToggleTd2"/>
                            </tr>
                            <xsl:for-each select="structuralInfo/entry">
                                <xsl:sort select="@key"/>
                                <tr>
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="translate(../../../@id,'/,-,.','_')"
                                            /><xsl:value-of
                                            select="translate(../../@sName,'/,-,.','_')"
                                        />_struct</xsl:attribute>
                                    <xsl:attribute name="style">display:none;</xsl:attribute>
                                    <td width="{$tdwidth}" valign="{$tdValignWhenToggled}">
                                        <a class="tooltip">
                                            <b>
                                                <xsl:value-of select="@key"/>
                                            </b>
                                            <xsl:copy-of select="$InfoImg"/>
                                            <xsl:call-template name="Tooltip"/>
                                        </a>
                                    </td>
                                    <td valign="{$tdValignWhenToggled}"
                                        colspan="{$tdColspanStructRows}">
                                        <b>
                                            <xsl:value-of select="text()"/>
                                        </b>
                                    </td>
                                </tr>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                    <xsl:choose>
                        <xsl:when test="child::node()=sAnnotationInfo">
                            <tr>
                                <td colspan="{$tdColspanStructRows}" style="{$tdRowExtinctionStyle}"
                                    align="{$tdAlignExtinction}">
                                    <a class="tooltip">
                                        <b>
                                            <xsl:value-of
                                                select="$MappingList2/elem[@maptype='sAnnotationInfo']"
                                            />
                                        </b>
                                        <xsl:copy-of select="$InfoImg"/>
                                        <xsl:call-template name="AnnoTooltip"/>
                                    </a>
                                </td>
                                <xsl:call-template name="ToggleTd3"/>
                            </tr>
                            <xsl:for-each select="sAnnotationInfo">
                                <xsl:sort select="@sName"/>

                                <tr>
                                    <xsl:attribute name="class">
                                        <xsl:value-of select="translate(../../@id,'/,-,.','_')"
                                            /><xsl:value-of
                                            select="translate(../@sName,'/,-,.','_')"
                                        />_anno</xsl:attribute>
                                    <xsl:attribute name="style">display:none;</xsl:attribute>
                                    <td width="{$tdwidth}" valign="{$tdValignWhenToggled}">
                                        <xsl:call-template name="NameAndOccurances"/>
                                    </td>
                                    <!-- if the number of arguments is greater than n, only the first n arguments are shown -->
                                    <xsl:choose>
                                        <xsl:when test="count(sValue) &gt; $maxSize">
                                            <td valign="{$tdValignWhenToggled}"
                                                style="{$tdStyleRightBorder}">
                                                <xsl:call-template name="FirstOfMax"/>
                                                <div style="display:none;">
                                                  <xsl:attribute name="id"><xsl:value-of
                                                  select="translate(../../@id,'/,-,.','_')"
                                                  /><xsl:value-of
                                                  select="translate(../@sName,'/,-,.','_')"
                                                  />_<xsl:value-of select="position()"/>
                                                  </xsl:attribute>
                                                  <xsl:call-template name="RestOfMax"/>
                                                </div>
                                            </td>
                                            <xsl:call-template name="ToggleTd"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:call-template name="UnderMax"/>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </tr>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                </table>
                <br/>
            </xsl:for-each>
        </div>
    </xsl:template>

    <!-- creates a table for each subcorpus -->
    <xsl:template match="//sCorpusInfo/sCorpusInfo" mode="SubCorpusTable">
        <div style="display:none;">
            <xsl:attribute name="id">
                <xsl:value-of select="@id"/>
            </xsl:attribute>
            <xsl:apply-templates mode="MetaData" select="metaDataInfo">
                <xsl:with-param name="metaDataInfo"
                    select="$MappingList2/elem[@maptype='metaDataInfo']"/>
            </xsl:apply-templates>
            <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
                <tr>
                    <td colspan="{$tdcolspan}" style="{$tdstyle}">
                        <a class="tooltip">
                            <xsl:value-of select="$MappingList2/elem[@maptype='structuralInfo']"/>
                            <xsl:copy-of select="$InfoImg"/>
                            <xsl:call-template name="structTooltip"/>
                        </a>
                    </td>
                </tr>
                <xsl:call-template name="sName"/>
                <tr>
                    <td>
                        <a class="tooltip">
                            <b>
                                <xsl:value-of select="$SDocument"/>
                            </b>
                            <xsl:copy-of select="$InfoImg"/>
                            <xsl:call-template name="sDocumentTooltip"/>
                        </a>
                    </td>
                    <td>
                        <xsl:apply-templates select="sDocumentInfo" mode="Document"/>
                    </td>
                </tr>
                <xsl:call-template name="structInfoCorpus"/>
            </table>
            <br/>
            <xsl:choose>
                <xsl:when test="$accumulation">
                    <xsl:call-template name="totalAnnoCorpus"/>
                </xsl:when>
            </xsl:choose>

            <!--<xsl:apply-templates mode="totalAnno" select="totalSAnnotationInfo">
                <xsl:with-param name="totalSAnno" select="$MappingList2/elem[@maptype='totalSAnnotationInfo']"/>
            </xsl:apply-templates>-->
        </div>
    </xsl:template>

    <!-- sums up the documents of a subcorpus -->
    <xsl:template match="sDocumentInfo" mode="Document">
        <b>
            <xsl:value-of select="@sName"/>
        </b>
        <xsl:choose>
            <xsl:when test="position()=last()">
                <xsl:text/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>, </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- creates a table for each maincorpus -->
    <xsl:template match="/saltProjectInfo/sCorpusInfo" mode="MainCorpusTable">
        <div style="display:none;">
            <xsl:attribute name="id">
                <xsl:value-of select="@id"/>
            </xsl:attribute>
            <xsl:apply-templates mode="MetaData" select="metaDataInfo">
                <xsl:with-param name="metaDataInfo"
                    select="$MappingList2/elem[@maptype='metaDataInfo']"/>
            </xsl:apply-templates>
            <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
                <tr>
                    <td colspan="{$tdcolspan}" style="{$tdstyle}">
                        <a class="tooltip">
                            <xsl:value-of select="$MappingList2/elem[@maptype='structuralInfo']"/>
                            <xsl:copy-of select="$InfoImg"/>
                            <xsl:call-template name="structTooltip"/>
                        </a>
                    </td>
                </tr>
                <xsl:call-template name="sName"/>
                <xsl:choose>
                    <xsl:when test="child::node()=sCorpusInfo">
                        <tr>
                            <td>
                                <a class="tooltip">
                                    <b>
                                        <xsl:value-of select="$SCorpus"/>
                                    </b>
                                    <xsl:copy-of select="$InfoImg"/>
                                    <xsl:call-template name="sCorpusTooltip"/>
                                </a>
                            </td>
                            <td>
                                <xsl:apply-templates select="sCorpusInfo" mode="Subcorpora"/>
                            </td>
                        </tr>
                    </xsl:when>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="count(child::node()=sCorpusInfo) &lt; 2">
                        <xsl:call-template name="structInfoCorpus"/>
                    </xsl:when>
                    <!-- insert rule for maincorpus with more than one subcorpus -->
                </xsl:choose>
            </table>
            <br/>
            <xsl:choose>
                <xsl:when test="$accumulation">
            <xsl:choose>
                <xsl:when test="count(child::node()=sCorpusInfo) &lt; 2">
                    <xsl:call-template name="totalAnnoCorpus"/>
                </xsl:when>
            </xsl:choose>
                </xsl:when>
            </xsl:choose>
            <xsl:apply-templates mode="totalAnno" select="totalSAnnotationInfo">
                <xsl:with-param name="totalSAnno"
                    select="$MappingList2/elem[@maptype='totalSAnnotationInfo']"/>
            </xsl:apply-templates>
        </div>
    </xsl:template>

    <!--  sums up the subcorpora of a maincorpus  -->
    <xsl:template match="sCorpusInfo" mode="Subcorpora">
        <b>
            <xsl:value-of select="@sName"/>
        </b>
        <xsl:choose>
            <xsl:when test="position()=last()">
                <xsl:text/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>, </xsl:text>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- table for meta-data -->
    <xsl:template match="metaDataInfo" mode="MetaData">
        <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
            <tr>
                <td colspan="{$tdcolspan}" style="{$tdstyle}">
                    <a class="tooltip">
                        <xsl:value-of select="$MappingList2/elem[@maptype='metaDataInfo']"/>
                        <xsl:copy-of select="$InfoImg"/>
                        <xsl:call-template name="metaTooltip"/>
                    </a>
                </td>
            </tr>
            <xsl:for-each select="entry">
                <tr>
                    <td width="{$tdwidth}">
                        <b>
                            <xsl:value-of select="@key"/>
                        </b>
                    </td>
                    <td>
                        <b>
                            <xsl:value-of select="text()"/>
                        </b>
                    </td>
                </tr>
            </xsl:for-each>
        </table>
        <br/>
    </xsl:template>


    <!--  extra-td for the "click"-button in annotations  -->
    <xsl:template name="ToggleTd">
        <td width="{$toggleTdWidth}" valign="{$toggleValign}" style="{$tdStyleLeftBorder}">
            <img
                src="http://korpling.german.hu-berlin.de/saltnpepper/salt/info/info-10/img/down_arrow_circle2.png"
                align="right">
                <xsl:attribute name="onclick">toggle_visibility('<xsl:value-of
                        select="translate(../../@id,'/,-,.','_')"/><xsl:value-of
                        select="translate(../@sName,'/,-,.','_')"/>_<xsl:value-of
                        select="position()"/>');</xsl:attribute>
            </img>
        </td>
    </xsl:template>

    <!-- totalAnnotation toggle-td -->
    <xsl:template name="ToggleTdTotal">
        <td width="{$toggleTdWidth}" valign="{$toggleValign}" style="{$tdStyleLeftBorder}">
            <img
                src="http://korpling.german.hu-berlin.de/saltnpepper/salt/info/info-10/img/down_arrow_circle2.png"
                align="right">
                <xsl:attribute name="onclick">toggle_visibility('<xsl:value-of
                        select="translate(../../@id,'/,-,.','_')"/><xsl:value-of
                        select="translate(../@sName,'/,-,.','_')"/>_<xsl:value-of
                        select="position()"/>_total');</xsl:attribute>
            </img>
        </td>
    </xsl:template>
    
    <!-- totalAnnotation toggle-td -->
    <xsl:template name="ToggleTdTotal2">
        <td width="{$toggleTdWidth}" valign="{$toggleValign}" style="{$tdStyleLeftBorder}">
            <img
                src="http://korpling.german.hu-berlin.de/saltnpepper/salt/info/info-10/img/down_arrow_circle2.png"
                align="right">
                <xsl:attribute name="onclick">toggle_visibility('<xsl:value-of
                    select="translate(../@id,'/,-,.','_')"/><xsl:value-of
                        select="translate(@sName,'/,-,.','_')"/>_<xsl:value-of
                            select="position()"/>_total2');</xsl:attribute>
            </img>
        </td>
    </xsl:template>

    <!-- structural toggle-td -->
    <xsl:template name="ToggleTd2">
        <td width="{$toggleTdWidth}" valign="{$toggleValign}" style="{$RowtoggleStyle}">
            <img
                src="http://korpling.german.hu-berlin.de/saltnpepper/salt/info/info-10/img/down_arrow_circle.png"
                align="right">
                <xsl:attribute name="onclick">toggle_visibility2('<xsl:value-of
                        select="translate(../@id,'/,-,.','_')"/><xsl:value-of
                        select="translate(@sName,'/,-,.','_')"/>_struct');</xsl:attribute>
            </img>
        </td>
    </xsl:template>

    <!-- annotation toggle-td -->
    <xsl:template name="ToggleTd3">
        <td width="{$toggleTdWidth}" valign="{$toggleValign}" style="{$RowtoggleStyle}">
            <img
                src="http://korpling.german.hu-berlin.de/saltnpepper/salt/info/info-10/img/down_arrow_circle.png"
                align="right">
                <xsl:attribute name="onclick">toggle_visibility2('<xsl:value-of
                        select="translate(../@id,'/,-,.','_')"/><xsl:value-of
                        select="translate(@sName,'/,-,.','_')"/>_anno');</xsl:attribute>
            </img>
        </td>
    </xsl:template>

    <!-- creates a table-row with SName and value plus infobox -->
    <xsl:template name="sName">
        <tr>
            <td width="{$tdwidth}">
                <a class="tooltip">
                    <b>
                        <xsl:value-of select="$SName"/>
                    </b>
                    <xsl:copy-of select="$InfoImg"/>
                    <xsl:call-template name="sNameTooltip"/>
                </a>
            </td>
            <td>
                <b>
                    <xsl:value-of select="@sName"/>
                </b>
            </td>
        </tr>
    </xsl:template>

    <!-- templates for @key-order -->
    <xsl:template match="structuralInfo/entry[@key = 'SNode']" mode="SNodeEntry">
        <tr>
            <td>
                <a class="tooltip">
                    <b>
                        <xsl:value-of select="@key"/>
                    </b>
                    <xsl:copy-of select="$InfoImg"/>
                    <xsl:call-template name="Tooltip"/>
                </a>
            </td>
            <td>
                <b>
                    <xsl:value-of select="text()"/>
                </b>
            </td>
        </tr>
    </xsl:template>

    <xsl:template match="structuralInfo/entry[@key = 'SRelation']" mode="SRelationEntry">
        <tr>
            <td>
                <a class="tooltip">
                    <b>
                        <xsl:value-of select="@key"/>
                    </b>
                    <xsl:copy-of select="$InfoImg"/>
                    <xsl:call-template name="Tooltip"/>
                </a>
            </td>
            <td>
                <b>
                    <xsl:value-of select="text()"/>
                </b>
            </td>
        </tr>
    </xsl:template>

    <!-- creates table-rows for each structural entry and value plus infobox -->
    <xsl:template match="structuralInfo/entry" mode="Entry">
        <xsl:for-each select="current()[@key != 'SNode']">
            <xsl:for-each select="current()[@key != 'SRelation']">
                <tr>
                    <td>
                        <a class="tooltip">
                            <b>
                                <xsl:value-of select="@key"/>
                            </b>
                            <xsl:copy-of select="$InfoImg"/>
                            <xsl:call-template name="Tooltip"/>
                        </a>
                    </td>
                    <td>
                        <b>
                            <xsl:value-of select="text()"/>
                        </b>
                    </td>
                </tr>
            </xsl:for-each>
        </xsl:for-each>
    </xsl:template>



    <!-- totalSAnnotation-tables -->
    <xsl:template mode="totalAnno" match="totalSAnnotationInfo">
        <xsl:param name="totalSAnno" select="name(current())"/>
        <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
            <tr>
                <td colspan="{$tdcolspan}" style="{$tdstyle}">
                    <a class="tooltip">
                        <xsl:value-of select="$totalSAnno"/>
                        <xsl:copy-of select="$InfoImg"/>
                        <xsl:call-template name="totalAnnoTooltip"/>
                    </a>
                </td>
            </tr>
            <xsl:for-each select="sAnnotationInfo">
                <xsl:sort select="@sName"/>
                <tr>
                    <td width="{$tdwidth}" valign="{$tdValignWhenToggled}">
                        <xsl:call-template name="NameAndOccurances"/>
                    </td>
                    <!-- if the number of arguments is greater than n, only the first n arguments are shown -->
                    <xsl:choose>
                        <xsl:when test="count(sValue) &gt; $maxSize">
                            <td valign="{$tdValignWhenToggled}" style="{$tdStyleRightBorder}">
                                <xsl:call-template name="FirstOfMax"/>
                                <!-- div for collapsable input -->
                                <div style="display:none;">
                                    <xsl:attribute name="id"><xsl:value-of
                                            select="translate(../../@id,'/,-,.','_')"/><xsl:value-of
                                            select="translate(../@sName,'/,-,.','_')"
                                            />_<xsl:value-of select="position()"
                                        />_total</xsl:attribute>
                                    <xsl:call-template name="RestOfMax"/>
                                </div>
                            </td>
                            <xsl:call-template name="ToggleTdTotal"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:call-template name="UnderMax"/>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
            </xsl:for-each>
        </table>
        <br/>
    </xsl:template>

    <!-- shows first n values (n = changeable in style.xslt) -->
    <xsl:template name="FirstOfMax">
        <xsl:for-each select="sValue[position() &lt; $maxSize+1]">
            <xsl:sort select="text()"/>
            <b>
                <xsl:value-of select="text()"/>
            </b>
            <xsl:text>&#160;(</xsl:text>
            <xsl:choose>
                <xsl:when test="position()!=last()">
                    <xsl:value-of select="@occurances"/>
                    <xsl:text>), </xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="@occurances"/>
                    <xsl:text>)</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>

    <!-- shows rest of the values -->
    <xsl:template name="RestOfMax">
        <xsl:for-each select="sValue[position() &gt; $maxSize]">
            <xsl:sort select="text()"/>
            <b>
                <xsl:value-of select="text()"/>
            </b>
            <xsl:text>&#160;(</xsl:text>
            <xsl:choose>
                <xsl:when test="position()=last()">
                    <xsl:value-of select="@occurances"/>
                    <xsl:text>)</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:value-of select="@occurances"/>
                    <xsl:text>), </xsl:text>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:for-each>
    </xsl:template>

    <!-- is used, when number of values is lower than n -->
    <xsl:template name="UnderMax">
        <td valign="{$tdValignWhenToggled}" colspan="{$tdColspanUnderMax}">
            <xsl:for-each select="sValue">
                <xsl:sort select="text()"/>
                <b>
                    <xsl:value-of select="text()"/>
                </b>
                <xsl:text>&#160;(</xsl:text>
                <xsl:choose>
                    <xsl:when test="position()!=last()">
                        <xsl:value-of select="@occurances"/>
                        <xsl:text>), </xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="@occurances"/>
                        <xsl:text>)</xsl:text>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:for-each>
        </td>
    </xsl:template>

    <!-- output of name and occurances, separated by ',' -->
    <xsl:template name="NameAndOccurances">
        <xsl:choose>
            <xsl:when test="position()!=last">
                <b><xsl:value-of select="@sName"/></b><xsl:text> (</xsl:text><xsl:value-of
                    select="sum(sValue/@occurances)"/>),</xsl:when>
            <xsl:otherwise><b><xsl:value-of select="@sName"
                    /></b><xsl:text> (</xsl:text><xsl:value-of select="sum(sValue/@occurances)"
                />)</xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <!-- creates only tables for annotated layer -->
    <xsl:template name="ChildNodeControl">
        <xsl:param name="NO_LAYER" select="./sLayerInfo[@sName=NO_LAYER]/@sName"/>
        <xsl:choose>
            <xsl:when test="child::node()=sAnnotationInfo|structuralInfo">
                <tr>
                    <td colspan="{$tdcolspan}" style="{$tdstyle}">
                        <xsl:choose>
                            <xsl:when test="@sName='NO_LAYER'">
                                <a class="tooltip">
                                    <xsl:value-of select="$NO_LAYER"/>
                                    <xsl:copy-of select="$InfoImg"/>
                                    <xsl:call-template name="layerTooltip"/>
                                </a>
                            </xsl:when>
                            <xsl:otherwise>
                                <a class="tooltip"> objects contained in layer <xsl:value-of
                                        select="@sName"/>
                                    <xsl:copy-of select="$InfoImg"/>
                                    <xsl:call-template name="layerTooltip"/>
                                </a>
                            </xsl:otherwise>
                        </xsl:choose>
                    </td>
                </tr>
            </xsl:when>
        </xsl:choose>
    </xsl:template>

    <!-- accumulation of structuralInfos for subcorpora -->
    <xsl:template name="structInfoCorpus">
        <xsl:variable name="structEntry"
            select="//sDocumentInfo/structuralInfo/entry[count(.|key('structEntryKey', @key)[1])=1]"/>
        <xsl:for-each select="$structEntry">
            <tr>
                <td>
                    <a class="tooltip">
                        <b>
                            <xsl:value-of select="@key"/>
                        </b>
                        <xsl:copy-of select="$InfoImg"/>
                        <xsl:call-template name="Tooltip"/>
                    </a>
                </td>
                <td>
                    <b>
                        <xsl:value-of
                            select="sum(//sDocumentInfo/structuralInfo/entry[@key = current()/@key])"
                        />
                    </b>
                </td>
            </tr>
        </xsl:for-each>
    </xsl:template>

    <!-- accumulation of totalSAnnotationInfo for subcorpora -->
    <xsl:template name="totalAnnoCorpus">
        <xsl:variable name="totalsNames"
            select="//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[count(.|key('totalAnnoName',@sName)[1])=1]"/>
        <xsl:variable name="totalValues" select="sValue[count(.|key('totalValue',.)[1])=1]"/>
        <table border="{$tableborder}" cellspacing="{$cellspacing}" width="{$tablewidth}">
            <tr>
                <td colspan="{$tdcolspan}" style="{$tdstyle}">
                    <a class="tooltip">
                        <xsl:value-of select="$MappingList2/elem[@maptype='totalSAnnotationInfo']"/>
                        <xsl:copy-of select="$InfoImg"/>
                        <xsl:call-template name="totalAnnoTooltip"/>
                    </a>
                </td>
            </tr>
            <xsl:for-each select="$totalsNames">
                <xsl:sort select="@sName"/>
                <tr>
                    <td width="{$tdwidth}" valign="{$tdValignWhenToggled}">
                        <b>
                            <xsl:value-of select="@sName"/>
                        </b>(<xsl:value-of
                            select="sum(//sDocumentInfo/totalSAnnotationInfo/sAnnotationInfo[@sName = current()/@sName]/@occurances)"
                        />) </td>
                    <xsl:choose>
                        <xsl:when test="count(sValue) &gt; $maxSize">
                            <td valign="{$tdValignWhenToggled}" style="{$tdStyleRightBorder}">
                                <xsl:for-each
                                    select="//sDocumentInfo/totalSAnnotationInfo/sAnnotationInfo[@sName = current()/@sName]//sValue[position() &lt; $maxSize+1]">
                                    <xsl:sort select="text()"/>
                                    <b>
                                        <xsl:value-of select="."/>
                                    </b>
                                    <xsl:text>&#160;(</xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="position()!=last()">
                                            <xsl:value-of
                                                select="sum(//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[@sName=current()/parent::node()/@sName]//sValue[text()=current()/text()]/@occurances)"/>
                                            <xsl:text>), </xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of
                                                select="sum(//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[@sName=current()/parent::node()/@sName]//sValue[text()=current()/text()]/@occurances)"/>
                                            <xsl:text>)</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                                <!-- div for collapsable input -->
                                <div style="display:none;">
                                    <xsl:attribute name="id"><xsl:value-of
                                            select="translate(../@id,'/,-,.','_')"/><xsl:value-of
                                            select="translate(@sName,'/,-,.','_')"
                                            />_<xsl:value-of select="position()"
                                        />_total2</xsl:attribute>
                                    <xsl:for-each
                                        select="//sDocumentInfo/totalSAnnotationInfo/sAnnotationInfo[@sName = current()/@sName]//sValue[position() &gt; $maxSize]">
                                        <xsl:sort select="text()"/>
                                        <b>
                                            <xsl:value-of select="text()"/>
                                        </b>
                                        <xsl:text>&#160;(</xsl:text>
                                        <xsl:choose>
                                            <xsl:when test="position()=last()">
                                                <xsl:value-of
                                                  select="sum(//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[@sName=current()/parent::node()/@sName]//sValue[text()=current()/text()]/@occurances)"/>
                                                <xsl:text>)</xsl:text>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <xsl:value-of
                                                  select="sum(//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[@sName=current()/parent::node()/@sName]//sValue[text()=current()/text()]/@occurances)"/>
                                                <xsl:text>), </xsl:text>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </div>
                            </td>
                            <xsl:call-template name="ToggleTdTotal2"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <td valign="{$tdValignWhenToggled}" colspan="{$tdColspanUnderMax}">
                                <xsl:for-each
                                    select="//sDocumentInfo/totalSAnnotationInfo/sAnnotationInfo[@sName = current()/@sName]//sValue">
                                    <xsl:sort select="text()"/>
                                    <b>
                                        <xsl:value-of select="text()"/>
                                    </b>
                                    <xsl:text>&#160;(</xsl:text>
                                    <xsl:choose>
                                        <xsl:when test="position()!=last()">
                                            <xsl:value-of
                                                select="sum(//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[@sName=current()/parent::node()/@sName]//sValue[text()=current()/text()]/@occurances)"/>
                                            <xsl:text>), </xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:value-of
                                                select="sum(//sDocumentInfo/totalSAnnotationInfo//sAnnotationInfo[@sName=current()/parent::node()/@sName]//sValue[text()=current()/text()]/@occurances)"/>
                                            <xsl:text>)</xsl:text>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </xsl:for-each>
                            </td>
                        </xsl:otherwise>
                    </xsl:choose>
                </tr>
            </xsl:for-each>
        </table>
    </xsl:template>

</xsl:stylesheet>
